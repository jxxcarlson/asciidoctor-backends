base_name = ARGV[0]
input_file = base_name + ".in"
output_file = base_name + ".out"

input = File.open(input_file, 'r') { |f| f.read }

TEX_DOLLAR_RX = /(^|\s|\()\$(.*?)\$($|\s|\)|,|\.)/
LATEX_BLOCK_RX = /\\\[*\\begin\{.*?\}.*\\end\{.*?\}\\\]/
LATEX_BLOCK_SUB = '\1'

expr = "\\\[\n\\begin\{foo\}\nho ho ho\n\\end\{bar\}\n\\\]"

output = input.gsub TEX_DOLLAR_RX, TEX_DOLLAR_SUB

File.open(output_file, 'w') {|f| f.write(output) }


eq_string= "ho ho ho\n\\\[\n\\begin\{equation\}\na^2 = 1\n\\end\{equation\}\n\\\]\nha ha ha"
eq_string2 = eq_string + "\n" + eq_string

arr_string = "ho ho ho\n\\\[\n\\begin\{array\}\na^2 = 1\n\\end\{array\}\n\\\]\nha ha ha"
arr_string2 = arr_string + "\n" + arr_string


rx1 = /\\\[/
rx2 =  /\\\[(.*?)\\\]/
rx2b = /\\\[(.*?)\\\]/m

foo = "\\\[ho ho ho\\\]"
foo1 = "la di dah \\\[ho ho ho\\\] ha ha ha"
foo2= "la di dah \n\\\[\nho ho ho\n\\\]\nha ha ha"


module TeXBlocks

	def get_tex_blocks str
	  rx = /\\\[(.*?)\\\]/m
	  matches = str.scan rx
	  matches.captures
	end

	def get_tex_blocks str
	  rx_tex_block = /(\\\[)(.*?)(\\\])/m
	  matches = str.scan rx_tex_block
	end

	def environment_type str
	  rx_env_block = /\\begin\{(.*?)\}/
	  m = str.match rx_env_block
	  m[1]
	end

	def environmemt_type_of_match m
	  environment_type m[1]
	end
  
	def restore_match_data m
	  m.join()
	end

	def strip_match_data m
	  m[1]
	end

	def process_environments str
	  tbs = get_tex_blocks str
	  tbs.each do |tb|
	    str = process_tex_block tb, str
	  end
	  str
	end
 
	 def process_tex_block m, str
	   block_type = environmemt_type_of_match m
	   if !(INNER_TYPES.include? block_type)
	     str = str.gsub restore_match_data(m), strip_match_data(m)
	   end
	   str
	 end
 
	 INNER_TYPES = ["array", "matrix"]
 
end
  
  

boo = "ho ho ho\n\\\[\n\\begin\{equation\}\na^2 = 1\n\\end\{equation\}\n\\\]\nha ha ha"
boo2 = boo + "\n" + boo